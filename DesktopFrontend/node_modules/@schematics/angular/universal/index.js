"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
const core_1 = require("@angular-devkit/core");
const schematics_1 = require("@angular-devkit/schematics");
const ts = require("typescript");
const ast_utils_1 = require("../utility/ast-utils");
const change_1 = require("../utility/change");
const config_1 = require("../utility/config");
const ng_ast_utils_1 = require("../utility/ng-ast-utils");
function updateConfigFile(options) {
    return (host) => {
        const config = config_1.getConfig(host);
        const clientApp = config_1.getAppFromConfig(config, options.clientApp || '0');
        if (clientApp === null) {
            throw new schematics_1.SchematicsException('Client app not found.');
        }
        options.test = options.test || clientApp.test;
        const tsCfg = options.tsconfigFileName && options.tsconfigFileName.endsWith('.json')
            ? options.tsconfigFileName : `${options.tsconfigFileName}.json`;
        const testTsCfg = options.testTsconfigFileName && options.testTsconfigFileName.endsWith('.json')
            ? options.testTsconfigFileName : `${options.testTsconfigFileName}.json`;
        const serverApp = Object.assign({}, clientApp, { platform: 'server', root: options.root, outDir: options.outDir, index: options.index, main: options.main, test: options.test, tsconfig: tsCfg, testTsconfig: testTsCfg, polyfills: undefined });
        if (options.name) {
            serverApp.name = options.name;
        }
        if (!config.apps) {
            config.apps = [];
        }
        config.apps.push(serverApp);
        host.overwrite('/.angular-cli.json', JSON.stringify(config, null, 2));
        return host;
    };
}
function findBrowserModuleImport(host, modulePath) {
    const moduleBuffer = host.read(modulePath);
    if (!moduleBuffer) {
        throw new schematics_1.SchematicsException(`Module file (${modulePath}) not found`);
    }
    const moduleFileText = moduleBuffer.toString('utf-8');
    const source = ts.createSourceFile(modulePath, moduleFileText, ts.ScriptTarget.Latest, true);
    const decoratorMetadata = ast_utils_1.getDecoratorMetadata(source, 'NgModule', '@angular/core')[0];
    const browserModuleNode = ast_utils_1.findNode(decoratorMetadata, ts.SyntaxKind.Identifier, 'BrowserModule');
    if (browserModuleNode === null) {
        throw new schematics_1.SchematicsException(`Cannot find BrowserModule import in ${modulePath}`);
    }
    return browserModuleNode;
}
function wrapBootstrapCall(options) {
    return (host) => {
        const config = config_1.getConfig(host);
        const clientApp = config_1.getAppFromConfig(config, options.clientApp || '0');
        if (clientApp === null) {
            throw new schematics_1.SchematicsException('Client app not found.');
        }
        const mainPath = core_1.normalize(`/${clientApp.root}/${clientApp.main}`);
        let bootstrapCall = ng_ast_utils_1.findBootstrapModuleCall(host, mainPath);
        if (bootstrapCall === null) {
            throw new schematics_1.SchematicsException('Bootstrap module not found.');
        }
        let bootstrapCallExpression = null;
        let currentCall = bootstrapCall;
        while (bootstrapCallExpression === null && currentCall.parent) {
            currentCall = currentCall.parent;
            if (currentCall.kind === ts.SyntaxKind.ExpressionStatement) {
                bootstrapCallExpression = currentCall;
            }
        }
        bootstrapCall = currentCall;
        const recorder = host.beginUpdate(mainPath);
        const beforeText = `document.addEventListener('DOMContentLoaded', () => {\n  `;
        const afterText = `\n});`;
        recorder.insertLeft(bootstrapCall.getStart(), beforeText);
        recorder.insertRight(bootstrapCall.getEnd(), afterText);
        host.commitUpdate(recorder);
    };
}
function addServerTransition(options) {
    return (host) => {
        const config = config_1.getConfig(host);
        const clientApp = config_1.getAppFromConfig(config, options.clientApp || '0');
        if (clientApp === null) {
            throw new schematics_1.SchematicsException('Client app not found.');
        }
        const mainPath = core_1.normalize(`/${clientApp.root}/${clientApp.main}`);
        const bootstrapModuleRelativePath = ng_ast_utils_1.findBootstrapModulePath(host, mainPath);
        const bootstrapModulePath = core_1.normalize(`/${clientApp.root}/${bootstrapModuleRelativePath}.ts`);
        const browserModuleImport = findBrowserModuleImport(host, bootstrapModulePath);
        const appId = options.appId;
        const transitionCall = `.withServerTransition({ appId: '${appId}' })`;
        const position = browserModuleImport.pos + browserModuleImport.getFullText().length;
        const transitionCallChange = new change_1.InsertChange(bootstrapModulePath, position, transitionCall);
        const transitionCallRecorder = host.beginUpdate(bootstrapModulePath);
        transitionCallRecorder.insertLeft(transitionCallChange.pos, transitionCallChange.toAdd);
        host.commitUpdate(transitionCallRecorder);
    };
}
function addDependencies() {
    return (host) => {
        const pkgPath = '/package.json';
        const buffer = host.read(pkgPath);
        if (buffer === null) {
            throw new schematics_1.SchematicsException('Could not find package.json');
        }
        const pkg = JSON.parse(buffer.toString());
        const ngCoreVersion = pkg.dependencies['@angular/core'];
        pkg.dependencies['@angular/platform-server'] = ngCoreVersion;
        host.overwrite(pkgPath, JSON.stringify(pkg, null, 2));
        return host;
    };
}
function updateGitignore(options) {
    return (host) => {
        const ignorePath = core_1.normalize('/.gitignore');
        const buffer = host.read(ignorePath);
        if (buffer === null) {
            // Assumption is made that there is no git repository.
            return host;
        }
        else {
            const content = buffer.toString();
            host.overwrite(ignorePath, `${content}\n${options.outDir}`);
        }
        return host;
    };
}
function default_1(options) {
    return (host, context) => {
        const templateSource = schematics_1.apply(schematics_1.url('./files'), [
            schematics_1.template(Object.assign({}, core_1.strings, options, { stripTsExtension: (s) => { return s.replace(/\.ts$/, ''); } })),
        ]);
        return schematics_1.chain([
            schematics_1.mergeWith(templateSource),
            addDependencies(),
            updateConfigFile(options),
            wrapBootstrapCall(options),
            addServerTransition(options),
            updateGitignore(options),
        ])(host, context);
    };
}
exports.default = default_1;
//# sourceMappingURL=data:application/json;base64,