"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
const fs = require("fs");
const Observable_1 = require("rxjs/Observable");
const empty_1 = require("rxjs/observable/empty");
const from_1 = require("rxjs/observable/from");
const of_1 = require("rxjs/observable/of");
const concat_1 = require("rxjs/operators/concat");
const concatMap_1 = require("rxjs/operators/concatMap");
const ignoreElements_1 = require("rxjs/operators/ignoreElements");
const map_1 = require("rxjs/operators/map");
const mergeMap_1 = require("rxjs/operators/mergeMap");
const publish_1 = require("rxjs/operators/publish");
const refCount_1 = require("rxjs/operators/refCount");
const src_1 = require("../src");
const { FSWatcher } = require('chokidar');
function _callFs(fn, ...args) {
    return new Observable_1.Observable(obs => {
        fn(...args, (err, result) => {
            if (err) {
                obs.error(err);
            }
            else {
                obs.next(result);
                obs.complete();
            }
        });
    });
}
/**
 * An implementation of the Virtual FS using Node as the background. There are two versions; one
 * synchronous and one asynchronous.
 */
class NodeJsAsyncHost {
    _getSystemPath(path) {
        if (process.platform.startsWith('win32')) {
            return src_1.asWindowsPath(path);
        }
        else {
            return src_1.asPosixPath(path);
        }
    }
    get capabilities() {
        return { synchronous: false };
    }
    write(path, content) {
        return new Observable_1.Observable(obs => {
            // Create folders if necessary.
            const _createDir = (path) => {
                if (fs.existsSync(this._getSystemPath(path))) {
                    return;
                }
                if (src_1.dirname(path) === path) {
                    throw new Error();
                }
                _createDir(src_1.dirname(path));
                fs.mkdirSync(this._getSystemPath(path));
            };
            _createDir(src_1.dirname(path));
            _callFs(fs.writeFile, this._getSystemPath(path), new Uint8Array(content)).subscribe(obs);
        });
    }
    read(path) {
        return _callFs(fs.readFile, this._getSystemPath(path)).pipe(map_1.map(buffer => new Uint8Array(buffer).buffer));
    }
    delete(path) {
        return this.isDirectory(path).pipe(mergeMap_1.mergeMap(isDirectory => {
            if (isDirectory) {
                const allFiles = [];
                const allDirs = [];
                const _recurseList = (path) => {
                    for (const fragment of fs.readdirSync(this._getSystemPath(path))) {
                        if (fs.statSync(this._getSystemPath(src_1.join(path, fragment))).isDirectory()) {
                            _recurseList(src_1.join(path, fragment));
                            allDirs.push(src_1.join(path, fragment));
                        }
                        else {
                            allFiles.push(src_1.join(path, fragment));
                        }
                    }
                };
                _recurseList(path);
                return from_1.from(allFiles)
                    .pipe(mergeMap_1.mergeMap(p => _callFs(fs.unlink, this._getSystemPath(p))), ignoreElements_1.ignoreElements(), concat_1.concat(from_1.from(allDirs).pipe(concatMap_1.concatMap(p => _callFs(fs.rmdir, this._getSystemPath(p))))), map_1.map(() => { }));
            }
            else {
                return _callFs(fs.unlink, this._getSystemPath(path));
            }
        }));
    }
    rename(from, to) {
        return _callFs(fs.rename, this._getSystemPath(from), this._getSystemPath(to));
    }
    list(path) {
        return _callFs(fs.readdir, this._getSystemPath(path)).pipe(map_1.map(names => names.map(name => src_1.fragment(name))));
    }
    exists(path) {
        // Exists is a special case because it cannot error.
        return new Observable_1.Observable(obs => {
            fs.exists(path, exists => {
                obs.next(exists);
                obs.complete();
            });
        });
    }
    isDirectory(path) {
        return _callFs(fs.stat, this._getSystemPath(path)).pipe(map_1.map(stat => stat.isDirectory()));
    }
    isFile(path) {
        return _callFs(fs.stat, this._getSystemPath(path)).pipe(map_1.map(stat => stat.isDirectory()));
    }
    // Some hosts may not support stats.
    stats(path) {
        return _callFs(fs.stat, this._getSystemPath(path));
    }
    // Some hosts may not support watching.
    watch(path, _options) {
        return new Observable_1.Observable(obs => {
            const watcher = new FSWatcher({ persistent: true }).add(this._getSystemPath(path));
            watcher
                .on('change', path => {
                obs.next({
                    path: src_1.normalize(path),
                    time: new Date(),
                    type: 0 /* Changed */,
                });
            })
                .on('add', path => {
                obs.next({
                    path: src_1.normalize(path),
                    time: new Date(),
                    type: 1 /* Created */,
                });
            })
                .on('unlink', path => {
                obs.next({
                    path: src_1.normalize(path),
                    time: new Date(),
                    type: 2 /* Deleted */,
                });
            });
            return () => watcher.close();
        }).pipe(publish_1.publish(), refCount_1.refCount());
    }
}
exports.NodeJsAsyncHost = NodeJsAsyncHost;
/**
 * An implementation of the Virtual FS using Node as the backend, synchronously.
 */
class NodeJsSyncHost {
    _getSystemPath(path) {
        if (process.platform.startsWith('win32')) {
            return src_1.asWindowsPath(path);
        }
        else {
            return src_1.asPosixPath(path);
        }
    }
    get capabilities() {
        return { synchronous: true };
    }
    write(path, content) {
        // Create folders if necessary.
        const _createDir = (path) => {
            if (fs.existsSync(this._getSystemPath(path))) {
                return;
            }
            _createDir(src_1.dirname(path));
            fs.mkdirSync(path);
        };
        _createDir(src_1.dirname(path));
        fs.writeFileSync(this._getSystemPath(path), new Uint8Array(content));
        return empty_1.empty();
    }
    read(path) {
        const buffer = fs.readFileSync(this._getSystemPath(path));
        return of_1.of(new Uint8Array(buffer).buffer);
    }
    delete(path) {
        if (this.isDirectory(path)) {
            // Since this is synchronous, we can recurse and safely ignore the result.
            for (const name of fs.readdirSync(this._getSystemPath(path))) {
                this.delete(src_1.join(path, name));
            }
            fs.rmdirSync(this._getSystemPath(path));
        }
        else {
            fs.unlinkSync(this._getSystemPath(path));
        }
        return empty_1.empty();
    }
    rename(from, to) {
        fs.renameSync(this._getSystemPath(from), this._getSystemPath(to));
        return empty_1.empty();
    }
    list(path) {
        return of_1.of(fs.readdirSync(this._getSystemPath(path))).pipe(map_1.map(names => names.map(name => src_1.fragment(name))));
    }
    exists(path) {
        return of_1.of(fs.existsSync(this._getSystemPath(path)));
    }
    isDirectory(path) {
        // tslint:disable-next-line:non-null-operator
        return this.stats(path).pipe(map_1.map(stat => stat.isDirectory()));
    }
    isFile(path) {
        // tslint:disable-next-line:non-null-operator
        return this.stats(path).pipe(map_1.map(stat => stat.isFile()));
    }
    // Some hosts may not support stats.
    stats(path) {
        return of_1.of(fs.statSync(this._getSystemPath(path)));
    }
    // Some hosts may not support watching.
    watch(path, _options) {
        return new Observable_1.Observable(obs => {
            const opts = { persistent: false };
            const watcher = new FSWatcher(opts).add(this._getSystemPath(path));
            watcher
                .on('change', path => {
                obs.next({
                    path: src_1.normalize(path),
                    time: new Date(),
                    type: 0 /* Changed */,
                });
            })
                .on('add', path => {
                obs.next({
                    path: src_1.normalize(path),
                    time: new Date(),
                    type: 1 /* Created */,
                });
            })
                .on('unlink', path => {
                obs.next({
                    path: src_1.normalize(path),
                    time: new Date(),
                    type: 2 /* Deleted */,
                });
            });
            return () => watcher.close();
        }).pipe(publish_1.publish(), refCount_1.refCount());
    }
}
exports.NodeJsSyncHost = NodeJsSyncHost;
//# sourceMappingURL=data:application/json;base64,