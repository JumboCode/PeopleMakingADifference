"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
const webpack_sources_1 = require("webpack-sources");
// This matches a comment left by the build-optimizer that contains pure import paths
const importCommentRegex = /\/\*\* PURE_IMPORTS_START (\S+) PURE_IMPORTS_END \*\//mg;
function purifyReplacements(content) {
    const pureImportMatches = getMatches(content, importCommentRegex, 1).join('|');
    const replacements = [];
    const addReplacement = (start, length, content) => replacements.push({
        start,
        end: start + length - 1,
        content,
    });
    /* Prefix safe imports with pure */
    content.replace(new RegExp(`(_(${pureImportMatches})__ = )(__webpack_require__\\(\\S+\\);)`, 'mg'), (match, p1, _p2, p3, offset) => {
        const newContent = `${p1}/*@__PURE__*/${p3}`;
        addReplacement(offset, match.length, newContent);
        return newContent;
    });
    /* Prefix default safe imports with pure */
    content.replace(new RegExp(`(_(${pureImportMatches})___default = )(__webpack_require__\\.\\w\\(\\S+\\);)`, 'mg'), (match, p1, _p2, p3, offset) => {
        const newContent = `${p1}/*@__PURE__*/${p3}`;
        addReplacement(offset, match.length, newContent);
        return newContent;
    });
    /* Prefix CCF and CMF statements */
    content.replace(/\w*__WEBPACK_IMPORTED_MODULE_\d+__angular_core__\["\w+" \/\* (ɵccf|ɵcmf|ɵcrt) \*\/\]\(/mg, (match, _p1, offset) => {
        const newContent = `/*@__PURE__*/${match}`;
        addReplacement(offset, match.length, newContent);
        return newContent;
    });
    /* Prefix module statements */
    content.replace(/new \w*__WEBPACK_IMPORTED_MODULE_\d+__angular_core__\["\w+" \/\* NgModuleFactory \*\/\]/mg, (match, offset) => {
        const newContent = `/*@__PURE__*/${match}`;
        addReplacement(offset, match.length, newContent);
        return newContent;
    });
    return replacements;
}
exports.purifyReplacements = purifyReplacements;
function purify(content) {
    const rawSource = new webpack_sources_1.RawSource(content);
    const replaceSource = new webpack_sources_1.ReplaceSource(rawSource, 'file.js');
    const replacements = purifyReplacements(content);
    replacements.forEach((replacement) => {
        replaceSource.replace(replacement.start, replacement.end, replacement.content);
    });
    return replaceSource.source();
}
exports.purify = purify;
function getMatches(str, regex, index) {
    let matches = [];
    let match;
    // tslint:disable-next-line:no-conditional-assignment
    while (match = regex.exec(str)) {
        matches = matches.concat(match[index].split(','));
    }
    return matches;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHVyaWZ5LmpzIiwic291cmNlUm9vdCI6Ii9Vc2Vycy9oYW5zbC9Tb3VyY2VzL2hhbnNsL2RldmtpdC8iLCJzb3VyY2VzIjpbInBhY2thZ2VzL2FuZ3VsYXJfZGV2a2l0L2J1aWxkX29wdGltaXplci9zcmMvcHVyaWZ5L3B1cmlmeS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBOzs7Ozs7R0FNRztBQUNILHFEQUEyRDtBQUczRCxxRkFBcUY7QUFDckYsTUFBTSxrQkFBa0IsR0FBRyx5REFBeUQsQ0FBQztBQVNyRiw0QkFBbUMsT0FBZTtJQUVoRCxNQUFNLGlCQUFpQixHQUFHLFVBQVUsQ0FBQyxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQy9FLE1BQU0sWUFBWSxHQUFrQixFQUFFLENBQUM7SUFDdkMsTUFBTSxjQUFjLEdBQUcsQ0FBQyxLQUFhLEVBQUUsTUFBYyxFQUFFLE9BQWUsS0FDcEUsWUFBWSxDQUFDLElBQUksQ0FBQztRQUNoQixLQUFLO1FBQ0wsR0FBRyxFQUFFLEtBQUssR0FBRyxNQUFNLEdBQUcsQ0FBQztRQUN2QixPQUFPO0tBQ1IsQ0FBQyxDQUFDO0lBRUwsbUNBQW1DO0lBQ25DLE9BQU8sQ0FBQyxPQUFPLENBQ2IsSUFBSSxNQUFNLENBQUMsTUFBTSxpQkFBaUIseUNBQXlDLEVBQUUsSUFBSSxDQUFDLEVBQ2xGLENBQUMsS0FBSyxFQUFFLEVBQUUsRUFBRSxHQUFHLEVBQUUsRUFBRSxFQUFFLE1BQU07UUFDekIsTUFBTSxVQUFVLEdBQUcsR0FBRyxFQUFFLGdCQUFnQixFQUFFLEVBQUUsQ0FBQztRQUM3QyxjQUFjLENBQUMsTUFBTSxFQUFFLEtBQUssQ0FBQyxNQUFNLEVBQUUsVUFBVSxDQUFDLENBQUM7UUFFakQsTUFBTSxDQUFDLFVBQVUsQ0FBQztJQUNwQixDQUFDLENBQ0YsQ0FBQztJQUVGLDJDQUEyQztJQUMzQyxPQUFPLENBQUMsT0FBTyxDQUNiLElBQUksTUFBTSxDQUNSLE1BQU0saUJBQWlCLHVEQUF1RCxFQUFFLElBQUksQ0FDckYsRUFDRCxDQUFDLEtBQUssRUFBRSxFQUFFLEVBQUUsR0FBRyxFQUFFLEVBQUUsRUFBRSxNQUFNO1FBQ3pCLE1BQU0sVUFBVSxHQUFHLEdBQUcsRUFBRSxnQkFBZ0IsRUFBRSxFQUFFLENBQUM7UUFDN0MsY0FBYyxDQUFDLE1BQU0sRUFBRSxLQUFLLENBQUMsTUFBTSxFQUFFLFVBQVUsQ0FBQyxDQUFDO1FBRWpELE1BQU0sQ0FBQyxVQUFVLENBQUM7SUFDcEIsQ0FBQyxDQUNGLENBQUM7SUFFRixtQ0FBbUM7SUFDbkMsT0FBTyxDQUFDLE9BQU8sQ0FDYiwwRkFBMEYsRUFDMUYsQ0FBQyxLQUFLLEVBQUUsR0FBRyxFQUFFLE1BQU07UUFDakIsTUFBTSxVQUFVLEdBQUcsZ0JBQWdCLEtBQUssRUFBRSxDQUFDO1FBQzNDLGNBQWMsQ0FBQyxNQUFNLEVBQUUsS0FBSyxDQUFDLE1BQU0sRUFBRSxVQUFVLENBQUMsQ0FBQztRQUVqRCxNQUFNLENBQUMsVUFBVSxDQUFDO0lBQ3BCLENBQUMsQ0FDRixDQUFDO0lBRUYsOEJBQThCO0lBQzlCLE9BQU8sQ0FBQyxPQUFPLENBQ2IsMkZBQTJGLEVBQzNGLENBQUMsS0FBSyxFQUFFLE1BQU07UUFDWixNQUFNLFVBQVUsR0FBRyxnQkFBZ0IsS0FBSyxFQUFFLENBQUM7UUFDM0MsY0FBYyxDQUFDLE1BQU0sRUFBRSxLQUFLLENBQUMsTUFBTSxFQUFFLFVBQVUsQ0FBQyxDQUFDO1FBRWpELE1BQU0sQ0FBQyxVQUFVLENBQUM7SUFDcEIsQ0FBQyxDQUNGLENBQUM7SUFFRixNQUFNLENBQUMsWUFBWSxDQUFDO0FBQ3RCLENBQUM7QUExREQsZ0RBMERDO0FBRUQsZ0JBQXVCLE9BQWU7SUFDcEMsTUFBTSxTQUFTLEdBQUcsSUFBSSwyQkFBUyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQ3pDLE1BQU0sYUFBYSxHQUFHLElBQUksK0JBQWEsQ0FBQyxTQUFTLEVBQUUsU0FBUyxDQUFDLENBQUM7SUFFOUQsTUFBTSxZQUFZLEdBQUcsa0JBQWtCLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDakQsWUFBWSxDQUFDLE9BQU8sQ0FBQyxDQUFDLFdBQVc7UUFDL0IsYUFBYSxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUMsS0FBSyxFQUFFLFdBQVcsQ0FBQyxHQUFHLEVBQUUsV0FBVyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQ2pGLENBQUMsQ0FBQyxDQUFDO0lBRUgsTUFBTSxDQUFDLGFBQWEsQ0FBQyxNQUFNLEVBQUUsQ0FBQztBQUNoQyxDQUFDO0FBVkQsd0JBVUM7QUFFRCxvQkFBb0IsR0FBVyxFQUFFLEtBQWEsRUFBRSxLQUFhO0lBQzNELElBQUksT0FBTyxHQUFhLEVBQUUsQ0FBQztJQUMzQixJQUFJLEtBQUssQ0FBQztJQUNWLHFEQUFxRDtJQUNyRCxPQUFPLEtBQUssR0FBRyxLQUFLLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUM7UUFDL0IsT0FBTyxHQUFHLE9BQU8sQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0lBQ3BELENBQUM7SUFFRCxNQUFNLENBQUMsT0FBTyxDQUFDO0FBQ2pCLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgR29vZ2xlIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxuICovXG5pbXBvcnQgeyBSYXdTb3VyY2UsIFJlcGxhY2VTb3VyY2UgfSBmcm9tICd3ZWJwYWNrLXNvdXJjZXMnO1xuXG5cbi8vIFRoaXMgbWF0Y2hlcyBhIGNvbW1lbnQgbGVmdCBieSB0aGUgYnVpbGQtb3B0aW1pemVyIHRoYXQgY29udGFpbnMgcHVyZSBpbXBvcnQgcGF0aHNcbmNvbnN0IGltcG9ydENvbW1lbnRSZWdleCA9IC9cXC9cXCpcXCogUFVSRV9JTVBPUlRTX1NUQVJUIChcXFMrKSBQVVJFX0lNUE9SVFNfRU5EIFxcKlxcLy9tZztcblxuLy8gUmVwbGFjZW1lbnRzIGFyZSBtZWFudCB0byBiZSB1c2VkIHdpdGggV2VicGFjaydzIFJlcGxhY2VTb3VyY2UuXG5leHBvcnQgaW50ZXJmYWNlIFJlcGxhY2VtZW50IHtcbiAgc3RhcnQ6IG51bWJlcjtcbiAgZW5kOiBudW1iZXI7XG4gIGNvbnRlbnQ6IHN0cmluZztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHB1cmlmeVJlcGxhY2VtZW50cyhjb250ZW50OiBzdHJpbmcpIHtcblxuICBjb25zdCBwdXJlSW1wb3J0TWF0Y2hlcyA9IGdldE1hdGNoZXMoY29udGVudCwgaW1wb3J0Q29tbWVudFJlZ2V4LCAxKS5qb2luKCd8Jyk7XG4gIGNvbnN0IHJlcGxhY2VtZW50czogUmVwbGFjZW1lbnRbXSA9IFtdO1xuICBjb25zdCBhZGRSZXBsYWNlbWVudCA9IChzdGFydDogbnVtYmVyLCBsZW5ndGg6IG51bWJlciwgY29udGVudDogc3RyaW5nKSA9PlxuICAgIHJlcGxhY2VtZW50cy5wdXNoKHtcbiAgICAgIHN0YXJ0LFxuICAgICAgZW5kOiBzdGFydCArIGxlbmd0aCAtIDEsXG4gICAgICBjb250ZW50LFxuICAgIH0pO1xuXG4gIC8qIFByZWZpeCBzYWZlIGltcG9ydHMgd2l0aCBwdXJlICovXG4gIGNvbnRlbnQucmVwbGFjZShcbiAgICBuZXcgUmVnRXhwKGAoXygke3B1cmVJbXBvcnRNYXRjaGVzfSlfXyA9ICkoX193ZWJwYWNrX3JlcXVpcmVfX1xcXFwoXFxcXFMrXFxcXCk7KWAsICdtZycpLFxuICAgIChtYXRjaCwgcDEsIF9wMiwgcDMsIG9mZnNldCkgPT4ge1xuICAgICAgY29uc3QgbmV3Q29udGVudCA9IGAke3AxfS8qQF9fUFVSRV9fKi8ke3AzfWA7XG4gICAgICBhZGRSZXBsYWNlbWVudChvZmZzZXQsIG1hdGNoLmxlbmd0aCwgbmV3Q29udGVudCk7XG5cbiAgICAgIHJldHVybiBuZXdDb250ZW50O1xuICAgIH0sXG4gICk7XG5cbiAgLyogUHJlZml4IGRlZmF1bHQgc2FmZSBpbXBvcnRzIHdpdGggcHVyZSAqL1xuICBjb250ZW50LnJlcGxhY2UoXG4gICAgbmV3IFJlZ0V4cChcbiAgICAgIGAoXygke3B1cmVJbXBvcnRNYXRjaGVzfSlfX19kZWZhdWx0ID0gKShfX3dlYnBhY2tfcmVxdWlyZV9fXFxcXC5cXFxcd1xcXFwoXFxcXFMrXFxcXCk7KWAsICdtZycsXG4gICAgKSxcbiAgICAobWF0Y2gsIHAxLCBfcDIsIHAzLCBvZmZzZXQpID0+IHtcbiAgICAgIGNvbnN0IG5ld0NvbnRlbnQgPSBgJHtwMX0vKkBfX1BVUkVfXyovJHtwM31gO1xuICAgICAgYWRkUmVwbGFjZW1lbnQob2Zmc2V0LCBtYXRjaC5sZW5ndGgsIG5ld0NvbnRlbnQpO1xuXG4gICAgICByZXR1cm4gbmV3Q29udGVudDtcbiAgICB9LFxuICApO1xuXG4gIC8qIFByZWZpeCBDQ0YgYW5kIENNRiBzdGF0ZW1lbnRzICovXG4gIGNvbnRlbnQucmVwbGFjZShcbiAgICAvXFx3Kl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfXFxkK19fYW5ndWxhcl9jb3JlX19cXFtcIlxcdytcIiBcXC9cXCogKMm1Y2NmfMm1Y21mfMm1Y3J0KSBcXCpcXC9cXF1cXCgvbWcsXG4gICAgKG1hdGNoLCBfcDEsIG9mZnNldCkgPT4ge1xuICAgICAgY29uc3QgbmV3Q29udGVudCA9IGAvKkBfX1BVUkVfXyovJHttYXRjaH1gO1xuICAgICAgYWRkUmVwbGFjZW1lbnQob2Zmc2V0LCBtYXRjaC5sZW5ndGgsIG5ld0NvbnRlbnQpO1xuXG4gICAgICByZXR1cm4gbmV3Q29udGVudDtcbiAgICB9LFxuICApO1xuXG4gIC8qIFByZWZpeCBtb2R1bGUgc3RhdGVtZW50cyAqL1xuICBjb250ZW50LnJlcGxhY2UoXG4gICAgL25ldyBcXHcqX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV9cXGQrX19hbmd1bGFyX2NvcmVfX1xcW1wiXFx3K1wiIFxcL1xcKiBOZ01vZHVsZUZhY3RvcnkgXFwqXFwvXFxdL21nLFxuICAgIChtYXRjaCwgb2Zmc2V0KSA9PiB7XG4gICAgICBjb25zdCBuZXdDb250ZW50ID0gYC8qQF9fUFVSRV9fKi8ke21hdGNofWA7XG4gICAgICBhZGRSZXBsYWNlbWVudChvZmZzZXQsIG1hdGNoLmxlbmd0aCwgbmV3Q29udGVudCk7XG5cbiAgICAgIHJldHVybiBuZXdDb250ZW50O1xuICAgIH0sXG4gICk7XG5cbiAgcmV0dXJuIHJlcGxhY2VtZW50cztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHB1cmlmeShjb250ZW50OiBzdHJpbmcpIHtcbiAgY29uc3QgcmF3U291cmNlID0gbmV3IFJhd1NvdXJjZShjb250ZW50KTtcbiAgY29uc3QgcmVwbGFjZVNvdXJjZSA9IG5ldyBSZXBsYWNlU291cmNlKHJhd1NvdXJjZSwgJ2ZpbGUuanMnKTtcblxuICBjb25zdCByZXBsYWNlbWVudHMgPSBwdXJpZnlSZXBsYWNlbWVudHMoY29udGVudCk7XG4gIHJlcGxhY2VtZW50cy5mb3JFYWNoKChyZXBsYWNlbWVudCkgPT4ge1xuICAgIHJlcGxhY2VTb3VyY2UucmVwbGFjZShyZXBsYWNlbWVudC5zdGFydCwgcmVwbGFjZW1lbnQuZW5kLCByZXBsYWNlbWVudC5jb250ZW50KTtcbiAgfSk7XG5cbiAgcmV0dXJuIHJlcGxhY2VTb3VyY2Uuc291cmNlKCk7XG59XG5cbmZ1bmN0aW9uIGdldE1hdGNoZXMoc3RyOiBzdHJpbmcsIHJlZ2V4OiBSZWdFeHAsIGluZGV4OiBudW1iZXIpIHtcbiAgbGV0IG1hdGNoZXM6IHN0cmluZ1tdID0gW107XG4gIGxldCBtYXRjaDtcbiAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm5vLWNvbmRpdGlvbmFsLWFzc2lnbm1lbnRcbiAgd2hpbGUgKG1hdGNoID0gcmVnZXguZXhlYyhzdHIpKSB7XG4gICAgbWF0Y2hlcyA9IG1hdGNoZXMuY29uY2F0KG1hdGNoW2luZGV4XS5zcGxpdCgnLCcpKTtcbiAgfVxuXG4gIHJldHVybiBtYXRjaGVzO1xufVxuIl19